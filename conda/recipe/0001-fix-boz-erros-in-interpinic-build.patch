From 7a74142d59c7b36c09989a80920e8c14653a030a Mon Sep 17 00:00:00 2001
From: Xylar Asay-Davis <xylarstorm@gmail.com>
Date: Thu, 11 Apr 2024 14:38:36 +0200
Subject: [PATCH] fix boz erros in interpinic build

---
 .../tools/interpinic/src/shr_infnan_mod.F90   | 88 +++++++++----------
 1 file changed, 44 insertions(+), 44 deletions(-)

diff --git a/components/elm/tools/interpinic/src/shr_infnan_mod.F90 b/components/elm/tools/interpinic/src/shr_infnan_mod.F90
index 638cad84d20e..31ffb1dff329 100644
--- a/components/elm/tools/interpinic/src/shr_infnan_mod.F90
+++ b/components/elm/tools/interpinic/src/shr_infnan_mod.F90
@@ -2,11 +2,11 @@
 
 module shr_infnan_mod
 
-!!     Inf_NaN_Detection module 
+!!     Inf_NaN_Detection module
 !!     Copyright(c) 2003, Lahey Computer Systems, Inc.
-!!     Copies of this source code, or standalone compiled files 
+!!     Copies of this source code, or standalone compiled files
 !!     derived from this source may not be sold without permission
-!!     from Lahey Computers Systems. All or part of this module may be 
+!!     from Lahey Computers Systems. All or part of this module may be
 !!     freely incorporated into executable programs which are offered
 !!     for sale. Otherwise, distribution of all or part of this file is
 !!     permitted, provided this copyright notice and header are included.
@@ -22,12 +22,12 @@ module shr_infnan_mod
 !!     isneginf(x) - test for a negative "infinite" value
 !!
 !!     Each function accepts a single or double precision real argument, and
-!!     returns a true or false value to indicate the presence of the value 
+!!     returns a true or false value to indicate the presence of the value
 !!     being tested for. If the argument is array valued, the function returns
 !!     a conformable logical array, suitable for use with the ANY function, or
 !!     as a logical mask.
 !!
-!!     Each function operates by transferring the bit pattern from a real 
+!!     Each function operates by transferring the bit pattern from a real
 !!     variable to an integer container. Unless testing for + or - infinity,
 !!     the sign bit is cleared to zero. The value is exclusive ORed with
 !!     the value being tested for. The integer result of the IEOR function is
@@ -48,14 +48,14 @@ module shr_infnan_mod
     integer, parameter :: Double = selected_int_kind(precision(1.0_r8))
 
     ! Single precision IEEE values
-    integer(Single), parameter :: sNaN    = Z"7FC00000"
-    integer(Single), parameter :: sPosInf = Z"7F800000"
-    integer(Single), parameter :: sNegInf = Z"FF800000"
+    integer(Single), parameter :: sNaN    = int(Z"7FC00000")
+    integer(Single), parameter :: sPosInf = int(Z"7F800000")
+    integer(Single), parameter :: sNegInf = int(Z"FF800000")
 
     ! Double precision IEEE values
-    integer(Double), parameter :: dNaN    = Z"7FF8000000000000"
-    integer(Double), parameter :: dPosInf = Z"7FF0000000000000"
-    integer(Double), parameter :: dNegInf = Z"FFF0000000000000"
+    integer(Double), parameter :: dNaN    = int(Z"7FF8000000000000")
+    integer(Double), parameter :: dPosInf = int(Z"7FF0000000000000")
+    integer(Double), parameter :: dNegInf = int(Z"FFF0000000000000")
 
     ! Locatation of single and double precision sign bit (Intel)
     ! Subtract one because bit numbering starts at zero
@@ -84,22 +84,22 @@ module shr_infnan_mod
       module procedure sisnan
       module procedure disnan
 #endif
-   end interface   
+   end interface
 
    interface shr_infnan_isinf
       module procedure sisinf
       module procedure disinf
-   end interface   
-   
+   end interface
+
    interface shr_infnan_isposinf
       module procedure sisposinf
       module procedure disposinf
-   end interface   
-   
+   end interface
+
    interface shr_infnan_isneginf
       module procedure sisneginf
       module procedure disneginf
-   end interface   
+   end interface
 
 
    integer :: shr_sisnan
@@ -107,7 +107,7 @@ module shr_infnan_mod
    integer :: shr_disnan
    external :: shr_disnan
 
-contains    
+contains
 
 !
 ! If FORTRAN intrinsic's exist use them
@@ -134,7 +134,7 @@ elemental function sisnan(x) result(res)
     res = isnan(x)
 #endif
 
-  end function  
+  end function
 
   ! Double precision test for NaN
   elemental function disnan(d) result(res)
@@ -156,7 +156,7 @@ elemental function disnan(d) result(res)
     res = isnan(d)
 #endif
 
-  end function  
+  end function
 
 !
 ! Otherwise link to a C function call that either uses the C90 isnan function or a x != x check
@@ -176,13 +176,13 @@ function c_sisnan_1D(x) result(res)
     real(r4), intent(in) :: x(:)
     logical :: res(size(x))
 
-    integer :: i 
+    integer :: i
 
     do i = 1, size(x)
        res(i) = (shr_sisnan(x(i)) /= 0)
     end do
   end function c_sisnan_1D
-  
+
   function c_sisnan_2D(x) result(res)
     real(r4), intent(in) :: x(:,:)
     logical :: res(size(x,1),size(x,2))
@@ -195,7 +195,7 @@ function c_sisnan_2D(x) result(res)
     end do
     end do
   end function c_sisnan_2D
-  
+
   function c_sisnan_3D(x) result(res)
     real(r4), intent(in) :: x(:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3))
@@ -210,7 +210,7 @@ function c_sisnan_3D(x) result(res)
     end do
     end do
   end function c_sisnan_3D
-  
+
   function c_sisnan_4D(x) result(res)
     real(r4), intent(in) :: x(:,:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3),size(x,4))
@@ -227,7 +227,7 @@ function c_sisnan_4D(x) result(res)
     end do
     end do
   end function c_sisnan_4D
-  
+
   function c_sisnan_5D(x) result(res)
     real(r4), intent(in) :: x(:,:,:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3),size(x,4),size(x,5))
@@ -246,7 +246,7 @@ function c_sisnan_5D(x) result(res)
     end do
     end do
   end function c_sisnan_5D
-  
+
   function c_sisnan_6D(x) result(res)
     real(r4), intent(in) :: x(:,:,:,:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3),size(x,4),size(x,5),size(x,6))
@@ -267,7 +267,7 @@ function c_sisnan_6D(x) result(res)
     end do
     end do
   end function c_sisnan_6D
-  
+
   function c_sisnan_7D(x) result(res)
     real(r4), intent(in) :: x(:,:,:,:,:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3),size(x,4),size(x,5),size(x,6),size(x,7))
@@ -290,7 +290,7 @@ function c_sisnan_7D(x) result(res)
     end do
     end do
   end function c_sisnan_7D
-  
+
   function c_disnan_scalar(x) result(res)
     real(r8), intent(in) :: x
     logical :: res
@@ -302,13 +302,13 @@ function c_disnan_1D(x) result(res)
     real(r8), intent(in) :: x(:)
     logical :: res(size(x))
 
-    integer :: i 
+    integer :: i
 
     do i = 1, size(x)
        res(i) = (shr_disnan(x(i)) /= 0)
     end do
   end function c_disnan_1D
-  
+
   function c_disnan_2D(x) result(res)
     real(r8), intent(in) :: x(:,:)
     logical :: res(size(x,1),size(x,2))
@@ -321,7 +321,7 @@ function c_disnan_2D(x) result(res)
     end do
     end do
   end function c_disnan_2D
-  
+
   function c_disnan_3D(x) result(res)
     real(r8), intent(in) :: x(:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3))
@@ -336,7 +336,7 @@ function c_disnan_3D(x) result(res)
     end do
     end do
   end function c_disnan_3D
-  
+
   function c_disnan_4D(x) result(res)
     real(r8), intent(in) :: x(:,:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3),size(x,4))
@@ -353,7 +353,7 @@ function c_disnan_4D(x) result(res)
     end do
     end do
   end function c_disnan_4D
-  
+
   function c_disnan_5D(x) result(res)
     real(r8), intent(in) :: x(:,:,:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3),size(x,4),size(x,5))
@@ -372,7 +372,7 @@ function c_disnan_5D(x) result(res)
     end do
     end do
   end function c_disnan_5D
-  
+
   function c_disnan_6D(x) result(res)
     real(r8), intent(in) :: x(:,:,:,:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3),size(x,4),size(x,5),size(x,6))
@@ -393,7 +393,7 @@ function c_disnan_6D(x) result(res)
     end do
     end do
   end function c_disnan_6D
-  
+
   function c_disnan_7D(x) result(res)
     real(r8), intent(in) :: x(:,:,:,:,:,:,:)
     logical :: res(size(x,1),size(x,2),size(x,3),size(x,4),size(x,5),size(x,6),size(x,7))
@@ -418,48 +418,48 @@ function c_disnan_7D(x) result(res)
   end function c_disnan_7D
 
 #endif
-  
+
   ! Single precision test for Inf
   elemental function sisinf(x) result(res)
     real(r4), intent(in) :: x
     logical :: res
     res = ieor(ibclr(transfer(x,sPosInf),SPSB), sPosInf) == 0
-  end function  
+  end function
 
   ! Double precision test for Inf
   elemental function disinf(d) result(res)
     real(r8), intent(in) :: d
     logical :: res
     res = ieor(ibclr(transfer(d,dPosInf),DPSB), dPosInf) == 0
-  end function  
-  
+  end function
+
   ! Single precision test for +Inf
   elemental function sisposinf(x) result(res)
     real(r4), intent(in) :: x
     logical :: res
     res = ieor(transfer(x,sPosInf), sPosInf) == 0
-  end function  
+  end function
 
   ! Double precision test for +Inf
   elemental function disposinf(d) result(res)
     real(r8), intent(in) :: d
     logical :: res
     res = ieor(transfer(d,dPosInf), dPosInf) == 0
-  end function  
-  
+  end function
+
   ! Single precision test for -Inf
   elemental function sisneginf(x) result(res)
     real(r4), intent(in) :: x
     logical :: res
     res = ieor(transfer(x,sNegInf), sNegInf) == 0
-  end function  
+  end function
 
   ! Double precision test for -Inf
   elemental function disneginf(d) result(res)
     real(r8), intent(in) :: d
     logical :: res
     res = ieor(transfer(d,dNegInf), dNegInf) == 0
-  end function  
+  end function
 
 end module shr_infnan_mod
 
